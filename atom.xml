<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Place For Me To Leave My Thoughts]]></title>
  <link href="http://darkzeroman.github.io/atom.xml" rel="self"/>
  <link href="http://darkzeroman.github.io/"/>
  <updated>2013-08-25T11:29:03-05:00</updated>
  <id>http://darkzeroman.github.io/</id>
  <author>
    <name><![CDATA[Vidhur Vohra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unix's words]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/25/unixs-words/"/>
    <updated>2013-08-25T10:26:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/25/unixs-words</id>
    <content type="html"><![CDATA[<p>Have you ever wanted to:</p>

<ul>
<li>check if a series of strings you have is a word?</li>
<li>create a text file with random words in it?</li>
<li>check for valid words using a pattern?</li>
</ul>


<p>Well you should check out the file available on Unix systems (OSX included!): <code>/usr/share/dict/words</code>.</p>

<h2>What is it?</h2>

<p>The files in <code>/usr/share/dict</code> are large lists of words that can be used for a variety of things. One thing to note is that there are different types of documents in the folder, there are lists for proper names, compound words, and connectives. The differences are explained in the following.</p>

<p><a href="http://netninja.com/2012/05/24/dictionary-files-are-they-all-created-equal/">Comparison of Dictionary Files on Various OSes</a></p>

<h2>Okay, How Do I Use It?</h2>

<p>Well the first thing to remember is that <code>words</code> is a text file, so grep can be used to search for words.</p>

<p>An example from <a href="http://en.wikipedia.org/wiki/Words_(Unix)">Wikipedia</a> is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>egrep -i <span class="s2">&quot;^[^aeiouy&#39;]{3}$&quot;</span> /usr/share/dict/words
</span></code></pre></td></tr></table></div></figure>


<p>This finds all three letter words that don&rsquo;t have the vowels (aeiouy). If you need more ideas on how do accomplish something specific like this, be sure to look for Regex patterns.</p>

<h2></h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix Utilities: Uniq]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/25/unix-tools-uniq/"/>
    <updated>2013-08-25T10:00:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/25/unix-tools-uniq</id>
    <content type="html"><![CDATA[<p>Only up until a little while ago did I realize that there are UNIX tools which can help with text searching/processing. This post will cover the <code>uniq</code> tool and a few good use cases.</p>

<h2>Background Information and How To Use Uniq</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uniq [OPTION] ... [INPUT [OUTPUT]]</span></code></pre></td></tr></table></div></figure>


<p>Notice that the options have to come <em>before</em> the input.</p>

<h2>Uniq Options</h2>

<p>This following are the options available for the uniq utility. There are short and long versions, so use whichever one you feel comfortable with. It&rsquo;s remember to note that two dashes is in front of words while one dash is meant for one character options.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-c, --count</span></code></pre></td></tr></table></div></figure>


<p>Prefix lines by the number of occurrences.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-d, --repeated</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-D, --all-repeated[=delimit-method] print all duplicate lines
</span><span class='line'>delimit-method={none(default),prepend,separate} Delimiting  is
</span><span class='line'>done with blank lines.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-f, --skip-fields=N</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-i, --ignore-case</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-s, --skip-chars=N</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-u, --unique</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-w, --check-chars=N</span></code></pre></td></tr></table></div></figure>


<p>&ldquo;A field is a run of whitespace, then non-whitespace characters. Fields are skipped before chars.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are Language Managers?]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/what-are-language-managers/"/>
    <updated>2013-08-18T19:07:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/what-are-language-managers</id>
    <content type="html"><![CDATA[<p>Language managers are good for:</p>

<ul>
<li>Managing different types of versions</li>
<li>Being able to quickly change versoinf for different programs</li>
</ul>


<p>Bad:</p>

<ul>
<li>Hard, complicated</li>
<li>Need to manage different versions</li>
</ul>


<p>Some version managers are:</p>

<ul>
<li>Ruby: RVM, RbEnv</li>
<li>Python: VirtualEnv, PyEnv</li>
<li>Java: Can be set <a href="http://vietpad.sourceforge.net/javaonlinux.html">link</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX Shortcuts]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/osx-shortcuts/"/>
    <updated>2013-08-18T19:04:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/osx-shortcuts</id>
    <content type="html"><![CDATA[<p>I started to really use keyboard shortcuts when I started to use VIM. But what I dislike is that I can&rsquo;t HJKL in another applications, which is tough to get over because I spent so much time learning I couldn&rsquo;t use them in other applications!</p>

<p>There are ways to use VIM keybindings in other applications, such as Vimperator, Vimium, Eclim, etc. But the hardest is that getting VIM keybindings to function means that there needs to be support for the insert, normal modes (<a href="http://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes">More here</a>) to work correctly. And this is difficult to do in an effective manner!</p>

<p>So that&rsquo;s why the Emacs keybindings make sense! Instead of having to try to mess around with modes, I can just use Control + Key to complete an operation. The bad part about using Control is that it is on the bottom left part of a Macbook keyboard, but I do remember that people always mentioned to me that they would remap the Caps Lock key to Control.</p>

<p>I am sad that I can&rsquo;t switch into ALL CAPS mode (which is good to have when I&rsquo;m trying to write proper SQL), but being able to control the cursor without having to move my hands to the arrow keys is something I am willing to give up. The one bad part is that these keyboards shortcuts are not always available in all programs, but it works in terminal, Chrome toolbar, and text editors! Which is really covers most of the stuff I do anyway!</p>

<p>The following is a summary of the keyboard shortcuts I find most important to know.
<em>Cursor is the small box or vertical line that shows where you are currently typing.</em></p>

<h2>Movement</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Keyboard Shortcut </th>
<th align="center">   Command     </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> Control + A       </td>
<td align="center"> Start of Line </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + E       </td>
<td align="center"> End of Line   </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + P       </td>
<td align="center"> Previous Line </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + N       </td>
<td align="center"> Next Line     </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + F       </td>
<td align="center"> Move Cursor Forward</td>
</tr>
<tr>
<td></td>
<td align="center"> Control + B       </td>
<td align="center"> Move Cursor Backward</td>
</tr>
<tr>
<td></td>
<td align="center"> Control + V       </td>
<td align="center"> Scroll Down</td>
</tr>
</tbody>
</table>


<h2>Editing</h2>

<table>
<thead>
<tr>
<th></th>
<th> Keyboard Shortcut </th>
<th align="center"> Command </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Control + K       </td>
<td align="center"> Cut From Cursor to End of Line (Cut)</td>
</tr>
<tr>
<td></td>
<td> Control + Y       </td>
<td align="center"> Paste The Text Removed By Control + K </td>
</tr>
<tr>
<td></td>
<td> Control + H       </td>
<td align="center"> Backspace </td>
</tr>
<tr>
<td></td>
<td> Control + D       </td>
<td align="center"> Forward Backspace</td>
</tr>
<tr>
<td></td>
<td> Control + T       </td>
<td align="center"> Transpose letters *</td>
</tr>
<tr>
<td></td>
<td> Control + O       </td>
<td align="center"> Insert Line Break </td>
</tr>
</tbody>
</table>


<br/>


<p>* If the cursor is:</p>

<ul>
<li>between two letters, the two letters will be switched.</li>
<li>is in a white space between two words, the two words will be switched.</li>
</ul>


<hr />

<p>Google around more to find out OSX keyboard shortcuts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My OSX Setup]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/my-osx-setup/"/>
    <updated>2013-08-18T18:58:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/my-osx-setup</id>
    <content type="html"><![CDATA[<p>My brother has just started college and I recommended that he should get a Macbook Pro because I have had a blast using one for the past one year. Also, he is interested in Computer Science and said he would like tips to know what to install for a good workstation setup.</p>

<p>Before an internship I primarily used a Linux box and was comfortable using the command line, but always had trouble with various things such as sound, turning on after a sleep, and performance issues on my previous Linux laptop. This might have been due to the fact that the machine wasn&rsquo;t the highest quality machine and might not have been a good fit for Ubuntu.</p>

<p>As I was making the list I figured it would be good to put up the list online so others can look at my setup and decide whether they want to use any of the tools I do.</p>

<h3>General OSX Desktop Tools:</h3>

<ul>
<li>Toggl</li>
<li>Yoink</li>
<li>Bartender</li>
<li>Flux</li>
<li>gfxCardStatus</li>
<li>Alfred</li>
<li>TotalFinder</li>
<li>Spectacle</li>
<li>KeyRemap4Macbook</li>
</ul>


<h3>Development Tools</h3>

<ul>
<li>MacVim</li>
<li>Oh My Zsh</li>
<li>DBeaver</li>
<li>Sublime Text</li>
<li>Iterm2</li>
</ul>


<p>I have remapped the Caps Lock to Control and will have a post discussing how I have made my life better with remapping keys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient SQL (Custom)]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/efficient-sql/"/>
    <updated>2013-08-18T18:37:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/efficient-sql</id>
    <content type="html"><![CDATA[<p>During one of my interviews I was asked whether I knew how to make SQL queries more efficient. At that point in time I had barely used SQL and had to ask the interviewer to move on to another subject.</p>

<p>But since I have started to use SQL in the <a href="http://dssg.io">DSSG Program</a> I&rsquo;ve started to deal with SQL queries that can possibly take a while to run. And I started to wonder how to make SQL queries more efficient and I found this <a href="http://www.databasejournal.com/features/mssql/article.php/1437391/Transact-SQL-Optimization-Tips.htm">article</a>.</p>

<p>The following is a quick summary of link.</p>

<h2>Tips to Speed Up Queries</h2>

<ul>
<li><strong>Try to restrict the queries result set by using the WHERE clause.</strong></li>
</ul>


<p>This one seems obvious.</p>

<ul>
<li><strong>Try to restrict the queries result st by returning only the particular columns from the table, not all the table&rsquo;s columns.</strong></li>
</ul>


<p>Another one that seems obvious.</p>

<ul>
<li><strong>If you need to return the total table&rsquo;s row count, use an alternative instead of <code>SELECT COUNT(*)</code> statement.</strong></li>
</ul>


<p>This one is interesting because I didn&rsquo;t know there were alternatives, I usually do run the <code>SELECT COUNT(*)</code> statement! I will update how to get the table count in Postgres soon.</p>

<ul>
<li><strong>Try to avoid the HAVING clause whenever possible.</strong></li>
</ul>


<p>This is an interesting one, I wouldn&rsquo;t think the HAVING clause would be that computationally expensive, but a good point is made that if it&rsquo;s possible to filter out unneeded values with a WHERE clause, that should be used.</p>

<ul>
<li><strong>Use SELECT statements with LIMIT keyword if you need to return only the first n rows.</strong></li>
</ul>


<p>Makes sense, I do this quite often when I am testing to make sure my query is running as expected. Usually used to run join on a subset before running it on the whole data set.</p>

<ul>
<li><strong>Try to use UNION ALL statement stead of UNION.</strong></li>
</ul>


<p>UNION ALL does not look for duplicates while UNION does look for duplicates whether they exist or not.</p>

<hr />

<p>I will add more SQL efficiency tips as I come across them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript/Node Build System for Sublime]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/js-slash-node-build-system-for-sublime/"/>
    <updated>2013-08-18T16:56:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/js-slash-node-build-system-for-sublime</id>
    <content type="html"><![CDATA[<p>To be able to build Javascript in Sublime Text, it&rsquo;s necessary to add a new Build System.</p>

<p>To be able to do that, it&rsquo;s necessary to first have Node installed, so head over to <a href="http://nodejs.org/download/">Node.js homepage</a> to install node.js first.</p>

<p>With the Sublime Text program open, navigate to <code>Tools</code> &ndash;> <code>Build System</code> &ndash;> <code>New Build System ...</code></p>

<p>And add the following:</p>

<figure class='code'><figcaption><span>Node.sublime-build</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;cmd&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;/usr/local/bin/node&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;working_dir&quot;</span><span class="o">:</span> <span class="s2">&quot;${project_path:${folder}}&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might be necessary to adjust the path to node for your own setup.</p>

<p>Now save, restart Sublime Text, and you should be able to build Javascript with Sublime Text!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Passing Arguments]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/passing-arguments/"/>
    <updated>2013-08-18T16:13:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/passing-arguments</id>
    <content type="html"><![CDATA[<h1>Varying Arguments in Python, Ruby, Javascript</h1>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">method</span><span class="p">(</span><span class="n">required_arg</span><span class="p">,</span> <span class="o">*</span><span class="n">optional_args</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">required_arg</span><span class="si">}</span><span class="s2"> says: </span><span class="si">#{</span><span class="n">optional_args</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s going on here?
The asterisk takes any additional arguments after the first required argument. So if you were to do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">method</span><span class="p">(</span><span class="s2">&quot;John&quot;</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="s2">&quot;how&quot;</span><span class="p">,</span> <span class="s2">&quot;are&quot;</span><span class="p">,</span> <span class="s2">&quot;you&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;John says: hello how are you&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The optional arguments are well.. optional, they aren&rsquo;t required. It&rsquo;s possible to call the method as so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">method</span><span class="p">(</span><span class="s2">&quot;Paul&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;Paul says:&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing to remember is that in Ruby it&rsquo;s possible to pass a hash as an argument.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Reference]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/markdown-reference/"/>
    <updated>2013-08-18T12:39:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/markdown-reference</id>
    <content type="html"><![CDATA[<p>What is Markdown good for?
Think of it has a way to write HTML without the messy confusing HTML syntax. Markdown is a simple set of rules that is converted into valid HTML. Some examples are GitHub Repository README and how I write these blog posts.</p>

<p>The following is a quick overview of the most common Markdown syntax.</p>

<h2>Headers</h2>

<p>  <code># Level one header</code></p>

<p>  <code>## Level two header</code></p>

<p>  <code>### Level three header</code></p>

<p>  &hellip; Up to six hashes are supported</p>

<p>I would show an example, but it doesn&rsquo;t work well because I&rsquo;m already using Markdown for this blog post!</p>

<h2>Links</h2>

<p>  <code>[This is a link](http://www.darkzeroman.github.io)</code></p>

<p>  <a href="http://www.darkzeroman.github.io">This is a link</a></p>

<h2>Lists</h2>

<h3>Unordered Lists</h3>

<p>Use any of the following: <code>*, +, -</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Item 1
</span><span class='line'>* Item 2
</span><span class='line'>* Item 3</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This</li>
<li>is</li>
<li>a list</li>
</ul>


<h3>Ordered Lists</h3>

<p>Ordered lists use number followed by period.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. with
</span><span class='line'>2. numbers</span></code></pre></td></tr></table></div></figure>


<ol>
<li>with</li>
<li>numbers</li>
</ol>


<h2>Formatting/Emphasis</h2>

<p>  <code>_italic_ or *italic*</code></p>

<p>  <em>italic</em></p>

<p>  <code>__bold__ or **bold**</code></p>

<p>  <strong>bold</strong></p>

<hr />

<h2>More Resources:</h2>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Full Markdown Syntax Document</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing All Pip Packages]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/17/removing-pip-packages/"/>
    <updated>2013-08-17T16:42:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/17/removing-pip-packages</id>
    <content type="html"><![CDATA[<p>If you need to remove all pip packages currently installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pip</span> <span class="n">freeze</span> <span class="o">|</span> <span class="n">xargs</span> <span class="n">pip</span> <span class="n">uninstall</span> <span class="o">-</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is more useful than you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/17/first-post/"/>
    <updated>2013-08-17T16:38:00-05:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/17/first-post</id>
    <content type="html"><![CDATA[<p>So I haven’t really ever used GitHub pages before, but I think this is an awesome way to get quick posts out without having to worry about wordpress and such. All I have to do is just edit a few files, run a few commands, and then push the source! How easy is that?</p>
]]></content>
  </entry>
  
</feed>
