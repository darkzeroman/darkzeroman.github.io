<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Place For Me To Leave My Thoughts]]></title>
  <link href="http://darkzeroman.github.io/atom.xml" rel="self"/>
  <link href="http://darkzeroman.github.io/"/>
  <updated>2013-09-07T18:55:39-04:00</updated>
  <id>http://darkzeroman.github.io/</id>
  <author>
    <name><![CDATA[Vidhur Vohra]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Disqus for Comments on Your Octopress]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/09/07/using-disqus-for-comments-on-your-octopress/"/>
    <updated>2013-09-07T18:43:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/09/07/using-disqus-for-comments-on-your-octopress</id>
    <content type="html"><![CDATA[<p>Want to know how to get comments on your Octopress blog?</p>

<p>It&rsquo;s not difficult at all!</p>

<h1>Steps</h1>

<ol>
<li><p>Go on over to <a href="http://www.disqus.com">disqus.com</a> and make an account.</p></li>
<li><p>Click on &ldquo;Universal&rdquo; for the type of blog you are using.</p></li>
<li><p>Open <code>_config.yml</code> in your root directory for your Octopress blog.</p></li>
<li><p>Find the line that looks like the following:</p></li>
</ol>


<p>  <code>yml _config.yml
  # Disqus Comments
  disqus_short_name:
  disqus_show_comment_count: false
 </code></p>

<ol>
<li><p>Look at the Disqus short name (mine is darkzeroman), use the following image as a guide for where to look.
<img src="http://i.imgur.com/l9SwGSw.png" alt="Disqus Screenshot" /></p></li>
<li><p>Copy that over to the <code>_config.yml</code> entry for <code>disqus_short_name</code> you saw in Step 4. So mine looks like:</p></li>
</ol>


<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># Disqus Comments</span>
</span><span class='line'><span class="l-Scalar-Plain">disqus_short_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">darkzeroman</span>
</span><span class='line'><span class="l-Scalar-Plain">disqus_show_comment_count</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">false</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>You&rsquo;re done!</li>
</ol>


<p>Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Large Text Splitter]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/09/07/large-text-splitter/"/>
    <updated>2013-09-07T16:15:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/09/07/large-text-splitter</id>
    <content type="html"><![CDATA[<h2>Problem</h2>

<p>While reading articles sometimes the writer doesn&rsquo;t split the text up in paragraphs which can be a pain to try to read.</p>

<p>Paragraphs are a great way of helping a reader have landmarks in a large amount of text. Also they serve as great separators that tell the reader I&rsquo;m ending on the previous idea and beginning a new one.</p>

<h2>Solution</h2>

<p>Some sort of extension for a browser with which a user can select a block of text and have the text automatically split into paragrahs.</p>

<p>This can be implemented by editing the HTML content directly and adding the line breaks after sentences end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting Internet and Physical World]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/09/07/connecting-internet-and-physical-world/"/>
    <updated>2013-09-07T14:27:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/09/07/connecting-internet-and-physical-world</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing Content Quickly]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/09/07/sharing-content-quickly/"/>
    <updated>2013-09-07T13:44:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/09/07/sharing-content-quickly</id>
    <content type="html"><![CDATA[<h2>Context</h2>

<p>When I browse Reddit or another similar website there are many images that I want to share with someone. The process currently looks like this:</p>

<ul>
<li>Copy URL to clipboard</li>
<li>Paste URL to friend</li>
<li>Friend clicks URL</li>
<li>Friend notices funny image</li>
<li>Repeat above</li>
</ul>


<h2>Problem</h2>

<p>This process works great when I&rsquo;m only sharing 1 or 2 images, but sometimes me and my buddy spend a good 10 minutes sending random images to each other and this process becomes inefficient.</p>

<p>I&rsquo;m thinking about building a web app that will dynamically load any type of content for both users.</p>

<p>The use case is the following:</p>

<ul>
<li>User 1 sends User 2 a link to the web app</li>
<li>User 1 can pass a link to the web app, which will load link automatically for User 2</li>
<li>Both users can automatically load content for each other</li>
</ul>


<p>How to build this?</p>

<h2>Solution</h2>

<p>Usually clients use AJAX to poll a server for status updates, but in this case, it would make sense for either the clients communicate directly or the server to push to clients updates.</p>

<p>I have looked into browser to browser communication platforms like WebRTC, but I don&rsquo;t feel that is at a usable state for this type of project.</p>

<p>For the server to push updates to the client, the options are some sort of web sockets. That leaves two major tools: socket.io and SockJS.</p>

<p>After doing a little bit of Googling it seems the common consensus is that SockJS is better than socket.io.</p>

<h2>Conclusion</h2>

<p>This seems to be a pretty easy project to do, it seems like with SockJS lots of the hard implementation details are taken care of. I want to cover the concepts of SockJS in another blog post though!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reddit Repost Blocker]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/09/07/reddit-repost-blocker/"/>
    <updated>2013-09-07T03:50:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/09/07/reddit-repost-blocker</id>
    <content type="html"><![CDATA[<p>A large issue with <a href="http://reddit.com">Reddit</a> is that content is regularly submitted again and again (otherwise known as reposting).</p>

<p>A vocal minority always posts comments about how the image has been posted many times before, sometimes the same day, week, or month.</p>

<p>So I started to think about how I can make a Reddit Enhancement Suite extension that would hide reposts.</p>

<p>I started to think about how this would work and there are a few ways I could see this working.</p>

<h2>But first, why?</h2>

<h3>Pros</h3>

<ul>
<li>Reposts suck. An argument that the content on Reddit should be fresh and seeing the same submission over and over would decrease the quality of the website.</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Reposts are a real part of Reddit, just because something is reposted doesn&rsquo;t mean that there won&rsquo;t be an interesting addition to the discussion a user has never seen before.</li>
<li>I remember when I used to block the imgur domain using Reddit Enhancement Suite, the extension use to just hide the submissions. So what would happen is that whenever I went to the front page I would only see two actual posts because almost everything was imgur links. For this extension, it would be counter-productive to block most of the submissions from the front page because they are reposts.</li>
</ul>


<h2>One Possible Implementation</h2>

<ul>
<li>Keep track of all front page posts for a long time (month or so, to start) into a data store (take your pick, mongo or sql)</li>
<li>The extension checks the url of the post against the database and if it already exists hide the submission post.</li>
</ul>


<h3>Issues:</h3>

<ul>
<li>Getting the data can take a while, but I found other people who have been archiving Reddit data.</li>
<li>Checking against the data store for a certain URL can take a while, of course hashing can make it easier but eventually collisions can happen.

<ul>
<li>One way to make things faster is to use some sort of hashing strategy that can check different hashtables for a URL. I remember that some data stores reverse a URL to make this easier. For example, the strategy is to store a domain in the format com.vvohra.subdomain so the com&rsquo;s, net&rsquo;s, etc can be stored on different servers to speed up checking of data.</li>
</ul>
</li>
</ul>


<h2>Existing Solutions</h2>

<p><a href="http://karmadecay.com">Karma Decay</a> shows which images have been reposted. I think it&rsquo;s similar to TinEye, so it should be able to handle images from different domains and changed sizes. It seems Karma Decay has an extension which allows a user to notice a submission has duplicates.</p>

<p>Another extension I found was <a href="http://node.angryzor.com/~rtytgat/repostblocker/">Repost Blocker</a>, which seems to be exactly what I brainstormed. Looking through the documentation, it seems like this extension uses Karma Decay to check for reposts.</p>

<p>Just a short brainstorming activity, gotta think some more!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX Shortcuts]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/osx-shortcuts/"/>
    <updated>2013-08-18T19:04:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/osx-shortcuts</id>
    <content type="html"><![CDATA[<p>I started to really use keyboard shortcuts when I started to use VIM. But what I dislike is that I can&rsquo;t HJKL in another applications, which is tough to get over because I spent so much time learning I couldn&rsquo;t use them in other applications!</p>

<p>There are ways to use VIM keybindings in other applications, such as Vimperator, Vimium, Eclim, etc. But the hardest is that getting VIM keybindings to function means that there needs to be support for the insert, normal modes (<a href="http://en.wikibooks.org/wiki/Learning_the_vi_Editor/Vim/Modes">More here</a>) to work correctly. And this is difficult to do in an effective manner!</p>

<p>So that&rsquo;s why the Emacs keybindings make sense! Instead of having to try to mess around with modes, I can just use Control + Key to complete an operation. The bad part about using Control is that it is on the bottom left part of a Macbook keyboard, but I do remember that people always mentioned to me that they would remap the Caps Lock key to Control.</p>

<p>I am sad that I can&rsquo;t switch into ALL CAPS mode (which is good to have when I&rsquo;m trying to write proper SQL), but being able to control the cursor without having to move my hands to the arrow keys is something I am willing to give up. The one bad part is that these keyboards shortcuts are not always available in all programs, but it works in terminal, Chrome toolbar, and text editors! Which is really covers most of the stuff I do anyway!</p>

<p>The following is a summary of the keyboard shortcuts I find most important to know.
<em>Cursor is the small box or vertical line that shows where you are currently typing.</em></p>

<h2>Movement</h2>

<table>
<thead>
<tr>
<th></th>
<th align="center"> Keyboard Shortcut </th>
<th align="center">   Command     </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="center"> Control + A       </td>
<td align="center"> Start of Line </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + E       </td>
<td align="center"> End of Line   </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + P       </td>
<td align="center"> Previous Line </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + N       </td>
<td align="center"> Next Line     </td>
</tr>
<tr>
<td></td>
<td align="center"> Control + F       </td>
<td align="center"> Move Cursor Forward</td>
</tr>
<tr>
<td></td>
<td align="center"> Control + B       </td>
<td align="center"> Move Cursor Backward</td>
</tr>
<tr>
<td></td>
<td align="center"> Control + V       </td>
<td align="center"> Scroll Down</td>
</tr>
</tbody>
</table>


<h2>Editing</h2>

<table>
<thead>
<tr>
<th></th>
<th> Keyboard Shortcut </th>
<th align="center"> Command </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> Control + K       </td>
<td align="center"> Cut From Cursor to End of Line (Cut)</td>
</tr>
<tr>
<td></td>
<td> Control + Y       </td>
<td align="center"> Paste The Text Removed By Control + K </td>
</tr>
<tr>
<td></td>
<td> Control + H       </td>
<td align="center"> Backspace </td>
</tr>
<tr>
<td></td>
<td> Control + D       </td>
<td align="center"> Forward Backspace</td>
</tr>
<tr>
<td></td>
<td> Control + T       </td>
<td align="center"> Transpose letters *</td>
</tr>
<tr>
<td></td>
<td> Control + O       </td>
<td align="center"> Insert Line Break </td>
</tr>
</tbody>
</table>


<br/>


<p>* If the cursor is:</p>

<ul>
<li>between two letters, the two letters will be switched.</li>
<li>is in a white space between two words, the two words will be switched.</li>
</ul>


<hr />

<p>Google around more to find out OSX keyboard shortcuts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My OSX Setup]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/my-osx-setup/"/>
    <updated>2013-08-18T18:58:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/my-osx-setup</id>
    <content type="html"><![CDATA[<p>My brother has just started college and I recommended that he should get a Macbook Pro because I have had a blast using one for the past one year. Also, he is interested in Computer Science and said he would like tips to know what to install for a good workstation setup.</p>

<p>Before an internship I primarily used a Linux box and was comfortable using the command line, but always had trouble with various things such as sound, turning on after a sleep, and performance issues on my previous Linux laptop. This might have been due to the fact that the machine wasn&rsquo;t the highest quality machine and might not have been a good fit for Ubuntu.</p>

<p>As I was making the list I figured it would be good to put up the list online so others can look at my setup and decide whether they want to use any of the tools I do.</p>

<h3>General OSX Desktop Tools:</h3>

<ul>
<li>Toggl</li>
<li>Yoink</li>
<li>Bartender</li>
<li>Flux</li>
<li>gfxCardStatus</li>
<li>Alfred</li>
<li>TotalFinder</li>
<li>Spectacle</li>
<li>KeyRemap4Macbook</li>
</ul>


<h3>Development Tools</h3>

<ul>
<li>MacVim</li>
<li>Oh My Zsh</li>
<li>DBeaver</li>
<li>Sublime Text</li>
<li>Iterm2</li>
</ul>


<p>I have remapped the Caps Lock to Control and will have a post discussing how I have made my life better with remapping keys.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient SQL (Custom)]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/efficient-sql/"/>
    <updated>2013-08-18T18:37:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/efficient-sql</id>
    <content type="html"><![CDATA[<p>During one of my interviews I was asked whether I knew how to make SQL queries more efficient. At that point in time I had barely used SQL and had to ask the interviewer to move on to another subject.</p>

<p>But since I have started to use SQL in the <a href="http://dssg.io">DSSG Program</a> I&rsquo;ve started to deal with SQL queries that can possibly take a while to run. And I started to wonder how to make SQL queries more efficient and I found this <a href="http://www.databasejournal.com/features/mssql/article.php/1437391/Transact-SQL-Optimization-Tips.htm">article</a>.</p>

<p>The following is a quick summary of link.</p>

<h2>Tips to Speed Up Queries</h2>

<ul>
<li><strong>Try to restrict the queries result set by using the WHERE clause.</strong></li>
</ul>


<p>This one seems obvious.</p>

<ul>
<li><strong>Try to restrict the queries result st by returning only the particular columns from the table, not all the table&rsquo;s columns.</strong></li>
</ul>


<p>Another one that seems obvious.</p>

<ul>
<li><strong>If you need to return the total table&rsquo;s row count, use an alternative instead of <code>SELECT COUNT(*)</code> statement.</strong></li>
</ul>


<p>This one is interesting because I didn&rsquo;t know there were alternatives, I usually do run the <code>SELECT COUNT(*)</code> statement! I will update how to get the table count in Postgres soon.</p>

<ul>
<li><strong>Try to avoid the HAVING clause whenever possible.</strong></li>
</ul>


<p>This is an interesting one, I wouldn&rsquo;t think the HAVING clause would be that computationally expensive, but a good point is made that if it&rsquo;s possible to filter out unneeded values with a WHERE clause, that should be used.</p>

<ul>
<li><strong>Use SELECT statements with LIMIT keyword if you need to return only the first n rows.</strong></li>
</ul>


<p>Makes sense, I do this quite often when I am testing to make sure my query is running as expected. Usually used to run join on a subset before running it on the whole data set.</p>

<ul>
<li><strong>Try to use UNION ALL statement stead of UNION.</strong></li>
</ul>


<p>UNION ALL does not look for duplicates while UNION does look for duplicates whether they exist or not.</p>

<hr />

<p>Something I&rsquo;ve learned about recently is Postgres&#8217; EXPLAIN and ANALYZE. More information is to be added soon.</p>

<p>I will add more SQL efficiency tips as I come across them!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript/Node Build System for Sublime]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/js-slash-node-build-system-for-sublime/"/>
    <updated>2013-08-18T16:56:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/js-slash-node-build-system-for-sublime</id>
    <content type="html"><![CDATA[<p>To be able to build Javascript in Sublime Text, it&rsquo;s necessary to add a new Build System.</p>

<p>To be able to do that, it&rsquo;s necessary to first have Node installed, so head over to <a href="http://nodejs.org/download/">Node.js homepage</a> to install node.js first.</p>

<p>With the Sublime Text program open, navigate to <code>Tools</code> &ndash;> <code>Build System</code> &ndash;> <code>New Build System ...</code></p>

<p>And add the following:</p>

<figure class='code'><figcaption><span>Node.sublime-build</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;cmd&quot;</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;/usr/local/bin/node&quot;</span><span class="p">,</span> <span class="s2">&quot;$file&quot;</span><span class="p">],</span>
</span><span class='line'>    <span class="s2">&quot;working_dir&quot;</span><span class="o">:</span> <span class="s2">&quot;${project_path:${folder}}&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might be necessary to adjust the path to node for your own setup.</p>

<p>Now save, restart Sublime Text, and you should be able to build Javascript with Sublime Text!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown Reference]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/18/markdown-reference/"/>
    <updated>2013-08-18T12:39:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/18/markdown-reference</id>
    <content type="html"><![CDATA[<p>What is Markdown good for?
Think of it has a way to write HTML without the messy confusing HTML syntax. Markdown is a simple set of rules that is converted into valid HTML. Some examples are GitHub Repository README and how I write these blog posts.</p>

<p>The following is a quick overview of the most common Markdown syntax.</p>

<h2>Headers</h2>

<p>  <code># Level one header</code></p>

<p>  <code>## Level two header</code></p>

<p>  <code>### Level three header</code></p>

<p>  &hellip; Up to six hashes are supported</p>

<p>I would show an example, but it doesn&rsquo;t work well because I&rsquo;m already using Markdown for this blog post!</p>

<h2>Links</h2>

<p>  <code>[This is a link](http://www.darkzeroman.github.io)</code></p>

<p>  <a href="http://www.darkzeroman.github.io">This is a link</a></p>

<h2>Lists</h2>

<h3>Unordered Lists</h3>

<p>Use any of the following: <code>*, +, -</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* Item 1
</span><span class='line'>* Item 2
</span><span class='line'>* Item 3</span></code></pre></td></tr></table></div></figure>


<ul>
<li>This</li>
<li>is</li>
<li>a list</li>
</ul>


<h3>Ordered Lists</h3>

<p>Ordered lists use number followed by period.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. with
</span><span class='line'>2. numbers</span></code></pre></td></tr></table></div></figure>


<ol>
<li>with</li>
<li>numbers</li>
</ol>


<h2>Formatting/Emphasis</h2>

<p>  <code>_italic_ or *italic*</code></p>

<p>  <em>italic</em></p>

<p>  <code>__bold__ or **bold**</code></p>

<p>  <strong>bold</strong></p>

<hr />

<h2>More Resources:</h2>

<ul>
<li><a href="http://daringfireball.net/projects/markdown/syntax">Full Markdown Syntax Document</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Removing All Pip Packages]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/17/removing-pip-packages/"/>
    <updated>2013-08-17T16:42:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/17/removing-pip-packages</id>
    <content type="html"><![CDATA[<p>If you need to remove all pip packages currently installed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pip</span> <span class="n">freeze</span> <span class="o">|</span> <span class="n">xargs</span> <span class="n">pip</span> <span class="n">uninstall</span> <span class="o">-</span><span class="n">y</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is more useful than you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://darkzeroman.github.io/blog/2013/08/17/first-post/"/>
    <updated>2013-08-17T16:38:00-04:00</updated>
    <id>http://darkzeroman.github.io/blog/2013/08/17/first-post</id>
    <content type="html"><![CDATA[<p>So I haven’t really ever used GitHub pages before, but I think this is an awesome way to get quick posts out without having to worry about wordpress and such. All I have to do is just edit a few files, run a few commands, and then push the source! How easy is that?</p>
]]></content>
  </entry>
  
</feed>
